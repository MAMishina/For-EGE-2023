# coding=windows-1251
# перебираем Х и У в допустимых значениях в указанных СС
for x in '012345678':
    for y in '012345678':
        # Ищем значение выражения из задания с различными Х и У 
        result = int('88' + x + '4' + y, 9) + int('7' + x + '44' + y, 11)
        # Проверяем частное от деления значения арифметического выражения на 61
        if result % 61 == 0:
            # Выводим наименьший ответ в консоль и завершаем программу. 
            print(result// 61)
            exit()








          
'''


# рекурсивная функция для проверки различных значений 
# переменной Si (Si - S камней в начальной куче,
# pozition -  номер хода в игре)
def f(Si, pozition):
    if Si >= 26: # условие завершения игры
        return pozition == 2
    # варианты действий Вани
    return f(Si + 1, pozition + 1) or f(Si * 2, pozition + 1)
 
for Si in range(1, 25): # Перебор всех допустимых значений Si
    # номер хода указываем 0 т.к. это стартовая позиция, еще никто не ходил
    if f(Si, 0) == 1: 
        print("Задача 19: ", Si)
        break
# т.к. мы ищем минимальное значение S, то логично остановить выполнение программы
# как только найдено первое подходящее значение.  

import turtle as t  # Подключим модуль черепашка
k = 15  # коэффициент для настраивания более удобного масштаба
t.left(90)
t.speed(10)
for i in range(6):  # пропишем алгоритм построения фигуры по условию
    t.forward(10 * k)
    t.right(60)
t.up()
t.speed(10)  # Увеличим скорость черепашки
for x in range(19, -10, - 1):  # Алгоритм построения точек
    for y in range(20, -10, - 1):
        t.goto(x * k, y * k)
        t.dot(4)  # точки размером 4 пикселя
t.done()
'''